import asyncio
import logging
from aiogram import Bot, Dispatcher, types, html
from aiogram import F
from aiogram.filters.command import Command, CommandStart, CommandObject
from aiogram.utils.formatting import Bold
from aiogram.types import Message, Update
import config
from API import API



logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def command_start(message: Message, command: CommandObject) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç
    """
    token = command.args if command.args else None  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã

    if token is None:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}* üëã \n"
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ",
            parse_mode="Markdown"
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    data = {
        "token": str(token),
        "telegram_id": str(message.from_user.id),
        "username": str(message.from_user.username),
        "full_name": str(message.from_user.full_name)
    }
    try:
        sender = API.merge_telegram(data)
    except Exception as e:
        logging.error(f"Error: {e}")
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}* üëã \n"
            "–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ",
            parse_mode="Markdown"
        )
        return

    if sender == 200:
        button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        keyboard = types.ReplyKeyboardMarkup(keyboard=[[button]], resize_keyboard=True, one_time_keyboard=True)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, *{message.from_user.full_name}* üëã \n"
            "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É! \n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    elif sender == 400:
        await message.answer(
            "–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown"
        )


@dp.message(F.content_type == 'contact')
async def handle_contact(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = {
        "telegram_id": str(message.from_user.id),
        "phone": str(message.contact.phone_number)
    }
    sender = API.merge_phone(data)
    if sender == 200:
        await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{message.contact.phone_number}* - —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
    if sender == 400:
        await message.answer(f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *{message.contact.phone_number}* - —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode="Markdown")
    if sender == 500:
        await message.answer(f"–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="Markdown")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())